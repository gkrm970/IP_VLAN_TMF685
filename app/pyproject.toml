[tool.poetry]
name = "resource_pool"
version = "0.1.0"
description = "Resource Pool API"
authors = [
    "Gopalakrishn  R M <gopalakrishna.rm@prodapt.com>"
]
readme = "README.md"


[tool.poetry.dependencies]
python = "^3.11"
# Main application framework
fastapi = "^0.103.1"
# ASGI web server implementation with Cython dependencies and other extras
uvicorn = { extras = ["standard"], version = "^0.23.2" }
# Server and process manager for ASGI applications
gunicorn = "^21.2.0"
# Middleware for request ID propagation
asgi-correlation-id = "^4.2.0"
# Async database driver for MySQL/MariaDB
aiomysql = "^0.2.0"
# Database schema migration tool
alembic = { version = "^1.12.0", extras = ["tz"] }
# Database ORM
sqlalchemy = { version = "^2.0.21", extras = ["asyncio"] }
# Async database driver for PostgreSQL
asyncpg = "^0.28.0"
# Type validation schemas used within FastAPI
pydantic = "^2.4.1"
# Settings management using Pydantic
pydantic-settings = "^2.0.3"
# Generic retry library
tenacity = "^8.2.3"
# JavaScript Object Signing and Encryption (JOSE) implementation used for OAuth
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
# HTTP client for external API calls
httpx = "^0.25.0"


[tool.poetry.group.dev.dependencies]
# Removes unused library imports and variables
autoflake = "^2.2.1"
# Auto-formatter
black = { extras = ["d"], version = "^23.9.1" }
# Sorting library imports
isort = "^5.12.0"
# Static type checker
mypy = "^1.5.0"
# Easy git pre-commit hooks
pre-commit = "^3.4.0"
# Linter
ruff = "^0.0.285"
# Unit testing framework
pytest = "^7.4.2"
# Pytest plugin to define test env variables from pyproject.toml
pytest-env = "^1.0.1"
# Tool to generate testing coverage reports
coverage = "^7.3.2"
# The test client uses HTTPX to make requests against the app
httpx = "^0.25.0"
# Mypy library stubs for python-jose
types-python-jose = "^3.3.4.8"


[[tool.poetry.source]]
name = "PyPI"
priority = "primary"


[[tool.poetry.source]]
# Private TINAA package registry hosted in GitLab
name = 'tinaa'
url = 'https://gitlab.tinaa.osc.tac.net/api/v4/projects/1029/packages/pypi/simple'
priority = "supplemental"


[tool.autoflake]
exclude = "venv,.venv"
ignore-init-module-imports = true
in-place = true
recursive = true
remove-all-unused-imports = true
remove-unused-variables = true


[tool.black]
line-length = 88
target-version = ['py311']


[tool.isort]
profile = "black"
line_length = 88  # Same as Black
include_trailing_comma = true
force_grid_wrap = 0
known_first_party = ["app"]
known_third_party = ["alembic"]


[tool.mypy]
# See https://mypy.readthedocs.io/en/stable/config_file.html for more information
# Disallows defining functions without type annotations or with incomplete type annotations
disallow_untyped_defs = true
# Shows column numbers in error messages
show_column_numbers = true
# Prefixes each error with the relevant context
show_error_context = true
# Warns about casting an expression to its inferred type
warn_redundant_casts = true
# Warns about unneeded # type: ignore comments
warn_unused_ignores = true


[tool.pytest.ini_options]
# The pytest team intends to fully utilize the rich TOML data format for configuration
# in the future, reserving the [tool.pytest] table for that. The ini_options table is
# being used, for now, as a bridge between the existing .ini configuration system and
# the future configuration format.

# Environment variables for tests, D: means don't overwrite if already set another way
env = [
    "D:API_BASE_URL=http://localhost:8639",
    "D:AUTH_BASE_URL=http://localhost",
    "D:DB_USERNAME=root",
    "D:DB_PASSWORD=test",
    "D:DB_HOST=localhost",
    "D:DB_NAME=tmf639_test",
]
# Ignore deprecation warnings produced by FastAPI internal calls to Pydantic
filterwarnings = """
ignore:.*use `with_info_plain_validator_function` instead.:DeprecationWarning
"""


[tool.ruff]
# Enable pycodestyle (`E`), Pyflakes (`F`), pep8-naming (`N`) and Pylint (`PL`) codes
# by default
select = ["E", "F", "N", "PL"]
ignore = []
# Same as Black
line-length = 88
# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Assume Python 3.11
target-version = "py311"


[tool.ruff.per-file-ignores]
# Ignore Pyflakes `imported but unused` errors in the files below
"app/api/deps/__init__.py" = ["F401"]
"app/models/__init__.py" = ["F401"]
"app/schemas/__init__.py" = ["F401"]
"app/tests/mocks/__init__.py" = ["F401"]
"app/tests/overrides/__init__.py" = ["F401"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
