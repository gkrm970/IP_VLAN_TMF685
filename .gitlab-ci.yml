variables:
  OCP_SERVER_LAB: https://api.tinaa-edtnabtf-app01.nfvdev.tlabs.ca:6443
  PROJECT_NAME: inventory-mediation
  GROUP: pltf
  SERVICE_IMAGE_NAME: inv-tmf685
  PROJECT_DEVELOP: $GROUP-develop-$PROJECT_NAME
  PROJECT_QA: $GROUP-qa-$PROJECT_NAME
  PROJECT_PREPROD: $GROUP-preprod-$PROJECT_NAME

  # Python and Poetry version definition for the static analysis jobs
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.5.1'

  # Test image name
  # Please do not change the naming convention of this image
  # It has to end with '-test-img-8f012d0d'. It is used for image cleanup in openshift
  TEST_IMAGE_NAME: $SERVICE_IMAGE_NAME-test-img-8f012d0d


include:
  - project: 'tinaa-platform/deployment/cicd'
    file: 'build-deploy/build.template.gitlab-ci.yml'
  #- local: '.gitlab/ci/static_analysis.yml'

stages:
  #- static_analysis
  #- unit_tests
  - build_deploy
  - infra_deploy


default:
  tags:
    # Default tag for all GitLab runner job executions
    - toll6-runners-app01


#autoflake:
#  extends: .base_job_dev_dependencies
#  stage: static_analysis
#  script:
#    - autoflake --check .

#black:
#  extends: .base_job_dev_dependencies
#  stage: static_analysis
#  script:
#    - black --check .

#isort:
#  extends: .base_job_dev_dependencies
#  stage: static_analysis
#  script:
#    - isort --check .

#mypy:
#  extends: .base_job
#  stage: static_analysis
#  script:
#    # Mypy requires the runtime dependencies to type check the code
#    - mypy .

#ruff:
#  extends: .base_job_dev_dependencies
#  stage: static_analysis
#  script:
#    - ruff check .

#pytest:
#  extends: .base_job
#  stage: unit_tests
#  script:
#    - pytest


trigger_build_deploy:
  extends: .trigger_build_deploy
  stage: build_deploy
  variables:
    DOCKERFILE_DIR: .
    # Pass the TCSO root certificate as arg when building the image
    BUILD_OPTS: "--build-arg TCSO_ROOT_CA"
  only:
#    - develop
    - qa
    - preprod


trigger_infra_deploy:
  image: registry.gitlab.tinaa.osc.tac.net/tinaa/container-registry/universal-api-gateway/podman-oc-helm:v0.0.6-master
  stage: infra_deploy
  environment:
    name: $CI_COMMIT_BRANCH
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      variables:
        OCP_PROJECT: $PROJECT_DEVELOP
        OCP_TOKEN: $DEPLOYER_TOKEN_DEVELOP
        ROUTE: $SERVICE_IMAGE_NAME.develop.app01.toll6.tinaa.tlabs.ca
        IMAGE_TAG: develop
    - if: $CI_COMMIT_BRANCH == "qa"
      variables:
        OCP_PROJECT: $PROJECT_QA
        OCP_TOKEN: $DEPLOYER_TOKEN_QA
        ROUTE: $SERVICE_IMAGE_NAME.qa.app01.toll6.tinaa.tlabs.ca
        IMAGE_TAG: qa
    - if: $CI_COMMIT_BRANCH == "preprod"
      variables:
        OCP_PROJECT: $PROJECT_PREPROD
        OCP_TOKEN: $DEPLOYER_TOKEN_PREPROD
        ROUTE: $SERVICE_IMAGE_NAME.preprod.app01.toll6.tinaa.tlabs.ca
        IMAGE_TAG: preprod
  script:
    - cd .deployment
    - echo "Running Helm"
    - helmfile_linux_amd64 --file ./resource_pool_management.helmfile.yaml --environment $CI_COMMIT_BRANCH template > openshift_config.yaml
    - cat ./openshift_config.yaml
    - echo "Logging into OpenShift";
    - oc login --token=$OCP_TOKEN --server=$OCP_SERVER_LAB --insecure-skip-tls-verify;
    - oc status;
    - helmfile_linux_amd64 --file ./resource_pool_management.helmfile.yaml --environment $CI_COMMIT_BRANCH sync;
  artifacts:
    name: "openshift config"
    expire_in: 30 days
    paths:
      - .deployment/openshift_config.yaml
    when: always
  dependencies:
    - trigger_build_deploy
